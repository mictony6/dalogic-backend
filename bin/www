#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dalogic-backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


let queue = [];
let readyPlayers = {};

// Socket.io
const socketIO = require("socket.io");
const io = new socketIO.Server(server, {
  cors: {
    origin: "http://localhost:8080"
  }
});
io.on('connection', (socket) => {
  console.log('New client connected', socket.id);
  socket.on('disconnect', () => {
    console.log('Client disconnected');

    // Remove user from queue when they disconnect
    queue = queue.filter(user => user !== socket.id);
  });

  socket.on("findMatch", () => {
    // Add user to queue
    queue.push(socket.id);

    // If there are at least two users in the queue, match them
    if (queue.length >= 2) {
      const user1 = socket.id
      const user2 = queue.shift();

      // Create a unique room ID
      const roomId = user1 + user2;

      // Join both users to the room
      io.sockets.sockets.get(user1).join(roomId);
      io.sockets.sockets.get(user2).join(roomId);

      readyPlayers[roomId] = 0;

      matchDetails = {
        roomId,
        players: [user1, user2],
        currentPlayerId: user1,
        boardConfig: ""
      }
      // Emit a "matchFound" event to both users
      io.to(roomId).emit('matchFound', matchDetails);
    }
  })


  socket.on("playerReady", (roomId) => {
    console.log("Player " + socket.id + " is ready at room" + roomId);
    readyPlayers[roomId] = (readyPlayers[roomId] || 0) + 1;

    if (readyPlayers[roomId] === 2) {
      io.to(roomId).emit('startGame');
    }

  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
