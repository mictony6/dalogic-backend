#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dalogic-backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


let queue = [];
let readyPlayers = {};
let disconnectedRooms = {};
let playerToRoom = {};
let socketToPlayer = {};

// Socket.io
const socketIO = require("socket.io");
const {log} = require("debug");
const io = new socketIO.Server(server, {
  cors: {
    origin: "*"
  }
});

io.on('connection', (socket) => {
  console.log('New client connected', socket.id);
  socket.on('disconnect', handlePlayerDisconnect.bind(socket));
  socket.on("registerPlayer", handleRegisterPlayer.bind(socket));
  socket.on("findMatch", handleFindMatch.bind(socket))
  socket.on("playerReady", handlePlayerReady.bind(socket))
  socket.on("playerMove", handlePlayerMove.bind(socket))
  socket.on("playerAnswer", handlePlayerAnswer.bind(socket))
  socket.on("playerTyping", handlePlayerTyping.bind(socket))
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


const pieceDistrib = [3, 3, 3, 3, 2, 2, 1, 1, 1, 1, 0, 0]
function getBoardConfig() {
  let grid = []

  for (let row = 0; row < 8; row++) {
    let currentRow = []
    for (let col = 0; col < 8; col++) {

      if ((row + col) % 2 === 1) {
        // if tile is black
        currentRow.push("X")
      } else {
        if (row < 3 || row > 4) {
          let val = pieceDistrib[Math.floor(Math.random() * pieceDistrib.length)];
          // if tile is white and not middle
          currentRow.push(val)
        } else {
          // if tile is middle
          currentRow.push(-1)
        }
      }

    }
    grid.push(currentRow)
  }

  return grid;
}


function rotateBoard180(boardConfig) {
  let newBoardConfig = []
  for (let row = 7; row >= 0; row--) {
    let currentRow = []
    for (let col = 7; col >= 0; col--) {
      currentRow.push(boardConfig[row][col])
    }
    newBoardConfig.push(currentRow)
  }
  return newBoardConfig;
}

function handleFindMatch(playerID){

  // If the user is already in a room, do nothing
  if (playerToRoom[playerID]) {
    return;
  }
  // Add user to queue
  queue.push(this.id);

  // If there are at least two users in the queue, match them
  let mathDetails2;
  let matchDetails1;
  if (queue.length >= 2) {
    const user1 = queue.shift();
    const user2 = queue.shift();

    // Create a unique room ID
    const roomId = user1 + user2;

    // Join both users to the room
    io.sockets.sockets.get(user1).join(roomId);
    io.sockets.sockets.get(user2).join(roomId);


    readyPlayers[roomId] = 0;

    matchDetails1 = {
      roomId,
      players: [user1, user2],
      isTurn: false,
      boardConfig: getBoardConfig()
    }

    mathDetails2 = {
      roomId,
      players: [user1, user2],
      isTurn: true,
      boardConfig: rotateBoard180(matchDetails1.boardConfig)
    }

    io.to(user1).emit('matchFound', matchDetails1);
    io.to(user2).emit('matchFound', mathDetails2);

  }
}

function handleRegisterPlayer(playerID) {
  // Register the player
  socketToPlayer[this.id] = playerID;
  // If the user is already in a room, do nothing
  let currentRoom = playerToRoom[playerID] ;
  console.log("Current room is " + currentRoom)
  log("disconnected rooms", disconnectedRooms[currentRoom]);
  if (currentRoom && disconnectedRooms[currentRoom]){
    console.log("Resuming game for player " + playerID);
    clearTimeout(disconnectedRooms[currentRoom]);
    delete disconnectedRooms[currentRoom];
    this.emit("resumeGame");
  }else {
    console.log("Player " + playerID + " registered")
    playerToRoom[playerID] = null;
    this.emit("playerRegistered", playerID);
  }
}

function handlePlayerReady (data) {

  let roomId = data.roomId;
  playerToRoom[data.playerID] = roomId;
  console.log("Player " + data.playerID + " is ready at room" + roomId);
  readyPlayers[roomId] = (readyPlayers[roomId] || 0) + 1;

  //
  if (readyPlayers[roomId] === 2) {
    io.to(roomId).emit('startGame');
  }
}

function handlePlayerMove(details)  {
  let moveHash = details.move;
  // send the move to the opponent rotated
  let rotatedHash = moveHash.split("-");

  rotatedHash[0] = 7 - rotatedHash[0];
  rotatedHash[1] = 7 - rotatedHash[1];
  rotatedHash[2] = 7 - rotatedHash[2];
  rotatedHash[3] = 7 - rotatedHash[3];
  rotatedHash = rotatedHash.join("-");
  this.to(details.roomId).emit('opponentMove', rotatedHash);
}

function handlePlayerDisconnect() {
  let currentRoom = playerToRoom[socketToPlayer[this.id]];
  readyPlayers[currentRoom] = readyPlayers[currentRoom]-1;

  if (readyPlayers[currentRoom] === 0) {
    clearTimeout(disconnectedRooms[currentRoom]);
    fullyRemove(currentRoom);
  } else if (readyPlayers[currentRoom] === 1) {
    // notify the opponent that the player disconnected
    this.to(currentRoom).emit('opponentDisconnected');
  }
  console.log('Client '+this.id+'disconnected at' + currentRoom);
  // If the user was in a room wait for 60 seconds before removing the room
  if (currentRoom) {
    disconnectedRooms[currentRoom] = setTimeout(fullyRemove, 60000, currentRoom);
  } else {
    // Remove user from queue when they disconnect
    queue = queue.filter(user => user !== this.id);
  }

}

function handlePlayerAnswer(details) {
  let answer = details.answer;
  let roomId = details.roomId;

  this.to(roomId).emit('opponentAnswer', answer);
}

function handlePlayerTyping (details) {
  let roomId = details.roomId;
  this.to(roomId).emit('opponentTyping', details.value);
}

function fullyRemove (currentRoom) {
  console.log("player disconnected fully")
  delete readyPlayers[currentRoom];
  delete disconnectedRooms[currentRoom];

  Object.keys(playerToRoom).forEach(key => {
    if (playerToRoom[key] === currentRoom) {
      playerToRoom[key] = null;
    }
  });


}